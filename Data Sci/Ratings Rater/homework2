{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 326,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import math\n",
    "from itertools import combinations "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[WindowsPath('/Users/harry/Documents/Python/.ipynb_checkpoints'),\n",
       " WindowsPath('/Users/harry/Documents/Python/DemoHW1_v0.ipynb'),\n",
       " WindowsPath('/Users/harry/Documents/Python/links.csv'),\n",
       " WindowsPath('/Users/harry/Documents/Python/movies.csv'),\n",
       " WindowsPath('/Users/harry/Documents/Python/output.txt'),\n",
       " WindowsPath('/Users/harry/Documents/Python/ratings.csv'),\n",
       " WindowsPath('/Users/harry/Documents/Python/README.txt'),\n",
       " WindowsPath('/Users/harry/Documents/Python/tags.csv'),\n",
       " WindowsPath('/Users/harry/Documents/Python/test.csv'),\n",
       " WindowsPath('/Users/harry/Documents/Python/testRating.csv'),\n",
       " WindowsPath('/Users/harry/Documents/Python/testRating2.csv'),\n",
       " WindowsPath('/Users/harry/Documents/Python/Untitled Folder'),\n",
       " WindowsPath('/Users/harry/Documents/Python/Untitled.ipynb'),\n",
       " WindowsPath('/Users/harry/Documents/Python/wk1.ipynb')]"
      ]
     },
     "execution_count": 298,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "IMPORTANT, MY MACHINE COULD NOT SEE ANY FILES UNLESS I FORCED THE PATH \n",
    "THUS, YOU WILL HAVE TO ADD EITHER YOUR OWN PATH OR CHANGE THE READ_CSV LINES\n",
    "\"\"\"\n",
    "PATH = Path(\"/Users\\harry\\Documents\\Python/\")\n",
    "list(PATH.iterdir())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>11</th>\n",
       "      <th>12</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>5</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     1    2    3    4    5    6    7    8    9   10  11   12\n",
       "0  1.0  NaN  3.0  NaN  NaN  5.0  NaN  NaN  5.0  NaN   4  NaN\n",
       "1  NaN  NaN  5.0  4.0  NaN  NaN  4.0  NaN  NaN  2.0   1  3.0\n",
       "2  2.0  4.0  NaN  1.0  2.0  NaN  3.0  NaN  4.0  3.0   5  NaN\n",
       "3  NaN  2.0  4.0  NaN  5.0  NaN  NaN  4.0  NaN  NaN   2  NaN\n",
       "4  NaN  NaN  4.0  3.0  4.0  2.0  NaN  NaN  NaN  NaN   2  5.0\n",
       "5  1.0  NaN  3.0  NaN  3.0  NaN  NaN  2.0  NaN  NaN   4  NaN"
      ]
     },
     "execution_count": 299,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "testData = pd.read_csv(PATH/\"testRating.csv\")\n",
    "testData"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.178542</td>\n",
       "      <td>0.414039</td>\n",
       "      <td>-0.102450</td>\n",
       "      <td>-0.308957</td>\n",
       "      <td>0.587040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>-0.178542</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.526235</td>\n",
       "      <td>0.468008</td>\n",
       "      <td>0.398911</td>\n",
       "      <td>-0.306440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.414039</td>\n",
       "      <td>-0.526235</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.623981</td>\n",
       "      <td>-0.284268</td>\n",
       "      <td>0.506370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>-0.102450</td>\n",
       "      <td>0.468008</td>\n",
       "      <td>-0.623981</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.458735</td>\n",
       "      <td>-0.235339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>-0.308957</td>\n",
       "      <td>0.398911</td>\n",
       "      <td>-0.284268</td>\n",
       "      <td>0.458735</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.215917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>0.587040</td>\n",
       "      <td>-0.306440</td>\n",
       "      <td>0.506370</td>\n",
       "      <td>-0.235339</td>\n",
       "      <td>-0.215917</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          0         1         2         3         4         5\n",
       "0  1.000000 -0.178542  0.414039 -0.102450 -0.308957  0.587040\n",
       "1 -0.178542  1.000000 -0.526235  0.468008  0.398911 -0.306440\n",
       "2  0.414039 -0.526235  1.000000 -0.623981 -0.284268  0.506370\n",
       "3 -0.102450  0.468008 -0.623981  1.000000  0.458735 -0.235339\n",
       "4 -0.308957  0.398911 -0.284268  0.458735  1.000000 -0.215917\n",
       "5  0.587040 -0.306440  0.506370 -0.235339 -0.215917  1.000000"
      ]
     },
     "execution_count": 289,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"TEST CASE FROM POWERPOINT\"\n",
    "s = testData.mean(axis=1)\n",
    "testData = testData.sub(s,axis=0)\n",
    "testA = (testData.fillna(0))\n",
    "testdf = compute_Sim(testA)\n",
    "testdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      movieId                                              title\n",
      "0           1                                   Toy Story (1995)\n",
      "1           2                                     Jumanji (1995)\n",
      "2           3                            Grumpier Old Men (1995)\n",
      "3           4                           Waiting to Exhale (1995)\n",
      "4           5                 Father of the Bride Part II (1995)\n",
      "...       ...                                                ...\n",
      "9061    32735  Arabian Nights (Il fiore delle mille e una not...\n",
      "9062    32743                            Ringu 0: Bâsudei (2000)\n",
      "9063    98279             Fantastic Fear of Everything, A (2012)\n",
      "9064    65514                                      Ip Man (2008)\n",
      "9065    98296                                    Deadfall (2012)\n",
      "\n",
      "[9066 rows x 2 columns]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>9056</th>\n",
       "      <th>9057</th>\n",
       "      <th>9058</th>\n",
       "      <th>9059</th>\n",
       "      <th>9060</th>\n",
       "      <th>9061</th>\n",
       "      <th>9062</th>\n",
       "      <th>9063</th>\n",
       "      <th>9064</th>\n",
       "      <th>9065</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.143077</td>\n",
       "      <td>0.076882</td>\n",
       "      <td>0.008127</td>\n",
       "      <td>0.093661</td>\n",
       "      <td>0.014571</td>\n",
       "      <td>0.109841</td>\n",
       "      <td>0.005078</td>\n",
       "      <td>-0.059312</td>\n",
       "      <td>0.029760</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.143077</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.023050</td>\n",
       "      <td>0.042711</td>\n",
       "      <td>0.009544</td>\n",
       "      <td>-0.003685</td>\n",
       "      <td>0.103450</td>\n",
       "      <td>0.123319</td>\n",
       "      <td>0.052530</td>\n",
       "      <td>0.193042</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0.076882</td>\n",
       "      <td>0.023050</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.015516</td>\n",
       "      <td>0.227926</td>\n",
       "      <td>-0.000419</td>\n",
       "      <td>0.022623</td>\n",
       "      <td>0.139844</td>\n",
       "      <td>0.102854</td>\n",
       "      <td>0.023421</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.008127</td>\n",
       "      <td>0.042711</td>\n",
       "      <td>0.015516</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.091506</td>\n",
       "      <td>-0.020982</td>\n",
       "      <td>0.185295</td>\n",
       "      <td>0.149702</td>\n",
       "      <td>-0.072775</td>\n",
       "      <td>0.033461</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0.093661</td>\n",
       "      <td>0.009544</td>\n",
       "      <td>0.227926</td>\n",
       "      <td>0.091506</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.114900</td>\n",
       "      <td>0.005068</td>\n",
       "      <td>0.127919</td>\n",
       "      <td>0.088390</td>\n",
       "      <td>0.013011</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9061</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9062</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9063</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9064</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9065</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>9066 rows × 9066 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          0         1         2         3         4         5         6     \\\n",
       "0     0.000000  0.143077  0.076882  0.008127  0.093661  0.014571  0.109841   \n",
       "1     0.143077  0.000000  0.023050  0.042711  0.009544 -0.003685  0.103450   \n",
       "2     0.076882  0.023050  0.000000  0.015516  0.227926 -0.000419  0.022623   \n",
       "3     0.008127  0.042711  0.015516  0.000000  0.091506 -0.020982  0.185295   \n",
       "4     0.093661  0.009544  0.227926  0.091506  0.000000  0.114900  0.005068   \n",
       "...        ...       ...       ...       ...       ...       ...       ...   \n",
       "9061  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000   \n",
       "9062  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000   \n",
       "9063  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000   \n",
       "9064  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000   \n",
       "9065  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000   \n",
       "\n",
       "          7         8         9     ...  9056  9057  9058  9059  9060  9061  \\\n",
       "0     0.005078 -0.059312  0.029760  ...   0.0   0.0   0.0   0.0   0.0   0.0   \n",
       "1     0.123319  0.052530  0.193042  ...   0.0   0.0   0.0   0.0   0.0   0.0   \n",
       "2     0.139844  0.102854  0.023421  ...   0.0   0.0   0.0   0.0   0.0   0.0   \n",
       "3     0.149702 -0.072775  0.033461  ...   0.0   0.0   0.0   0.0   0.0   0.0   \n",
       "4     0.127919  0.088390  0.013011  ...   0.0   0.0   0.0   0.0   0.0   0.0   \n",
       "...        ...       ...       ...  ...   ...   ...   ...   ...   ...   ...   \n",
       "9061  0.000000  0.000000  0.000000  ...   0.0   0.0   0.0   0.0   0.0   0.0   \n",
       "9062  0.000000  0.000000  0.000000  ...   0.0   0.0   0.0   0.0   0.0   0.0   \n",
       "9063  0.000000  0.000000  0.000000  ...   0.0   0.0   0.0   0.0   0.0   0.0   \n",
       "9064  0.000000  0.000000  0.000000  ...   0.0   0.0   0.0   0.0   0.0   0.0   \n",
       "9065  0.000000  0.000000  0.000000  ...   0.0   0.0   0.0   0.0   0.0   0.0   \n",
       "\n",
       "      9062  9063  9064  9065  \n",
       "0      0.0   0.0   0.0   0.0  \n",
       "1      0.0   0.0   0.0   0.0  \n",
       "2      0.0   0.0   0.0   0.0  \n",
       "3      0.0   0.0   0.0   0.0  \n",
       "4      0.0   0.0   0.0   0.0  \n",
       "...    ...   ...   ...   ...  \n",
       "9061   0.0   0.0   0.0   0.0  \n",
       "9062   0.0   0.0   0.0   0.0  \n",
       "9063   0.0   0.0   0.0   0.0  \n",
       "9064   0.0   0.0   0.0   0.0  \n",
       "9065   0.0   0.0   0.0   0.0  \n",
       "\n",
       "[9066 rows x 9066 columns]"
      ]
     },
     "execution_count": 325,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#MAIN\n",
    "\n",
    "data = pd.read_csv(PATH/\"ratings.csv\")\n",
    "data_mov = pd.read_csv(PATH/\"movies.csv\")\n",
    "\n",
    "\n",
    "df_val = data.copy()\n",
    "df_val = df_val.drop('timestamp', axis=1) #TIME STAMP WAS NOT USED \n",
    "\n",
    "\n",
    "\n",
    "#FILTER OUT UNRATED MOVIES AND BUILD A DATAFRAME OF THE REMAINING ONES WITH CORESPONDING ENCODED ID\n",
    "data_names = data_mov.drop('genres',axis =1) #THIS VERSION IS NOT INFLUENCED BY GENRE OR TAG DUE TO TIME CONSTRAINTS\n",
    "data_names = data_names.set_index('movieId')\n",
    "\n",
    "df_temp = df_val.sort_values(by='movieId')\n",
    "df_filter = df_temp.set_index('movieId')\n",
    "keepl = list(set(df_filter.index))\n",
    "\n",
    "data_names = data_names.filter(keepl,axis=0)\n",
    "data_names = data_names.reset_index()\n",
    "lookupFrame = data_names.to_numpy()\n",
    "\n",
    "print(data_names)\n",
    "\n",
    "\n",
    "\n",
    "#ENCODE THE DATA TABLE \n",
    "df_temp = encode_data(df_temp)\n",
    "df_val = df_temp.pivot(index='movieId', columns='userId', values='rating')\n",
    "\n",
    "#CENTER THE DATA TABLE\n",
    "s = df_val.mean(axis=1)\n",
    "df_rating = df_val.copy()\n",
    "df_new = df_val.sub(s,axis=0)\n",
    "\n",
    "#FILL THE NAS\n",
    "df_test1 = df_new.fillna(0)\n",
    "df_rating = df_rating.fillna(0)\n",
    "\n",
    "#COMPUTE THE COS FUNCTION\n",
    "newdf = compute_Sim(df_test1)\n",
    "np.fill_diagonal(newdf.values, 0)#ENSURES IT DOESN'T COUNT ITSELF IN TOP 5 CLOSEST\n",
    "\n",
    "\n",
    "arrR = df_rating.to_numpy() #THIS IS USED AS A LIST VERSION OF DF_RATING TO SPEEDUP RUNTIME\n",
    "\n",
    "df_new = pd.DataFrame(newdf)\n",
    "df_new\n",
    "\n",
    "\n",
    "#RUN THE NEXT BOX AFTER THIS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "done\n"
     ]
    }
   ],
   "source": [
    "#CONSTRUCT THE LIST OF NEW PREDICTED RATINGS -------------------------------------------------------\n",
    "newlist = []\n",
    "for x in range(df_rating.index.max()):\n",
    "    innerlist = []\n",
    "    i = newdf.iloc[:,x].to_dict()\n",
    "    ls = top_k_sorted_dict(i,5)\n",
    "    for y in range(df_rating.columns.max()):\n",
    "        s = (x,y)\n",
    "        innerlist.append(compute_rating(s,ls))\n",
    "        #print(innerlist)\n",
    "    newlist.append(innerlist)\n",
    "\n",
    "#CONVERT THE NEW LIST OF RATINGS INTO A DATA FRAME\n",
    "df_predicted = pd.DataFrame(newlist)\n",
    "df_predicted = df_predicted.T\n",
    "\n",
    "#CONSTRUCT THE TOP 5 LIST OF NEW PREDICTED RATINGS -------------------------------------------------------\n",
    "top5list = []\n",
    "for x in range(df_predicted.index.max()):\n",
    "    top5list.append(top_k_sorted_dict(df_predicted.iloc[x].to_dict(),5))\n",
    "    \n",
    "#WRITE THE TOP 5 MOVEIS FOR EACH USER  -------------------------------------------------------\n",
    "with open(\"output.txt\", \"w\") as text_file:\n",
    "    for x in range(len(top5list)):\n",
    "        print((x+1),lookup(top5list[x][0][0]),lookup(top5list[x][1][0]),lookup(top5list[x][2][0]),lookup(top5list[x][3][0]),lookup(top5list[x][4][0]), file=text_file)\n",
    "print(\"done\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_Sim(df_test):\n",
    "    arr = df_test.to_numpy()\n",
    "    cosn = np.dot(arr, arr.T)\n",
    "    product =np.multiply((divide_by_root(arr)[:, np.newaxis]),(divide_by_root(arr)[np.newaxis, :]))\n",
    "    df_sim = pd.DataFrame(np.divide(cosn, product))\n",
    "    return df_sim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "metadata": {},
   "outputs": [],
   "source": [
    "def lookup(a):\n",
    "    return lookupFrame[a][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [],
   "source": [
    "#TO SAVE ON MEMORY, THIS FUNCTION RUNS BASED OFF THE GLOBAL VAR arrR\n",
    "def compute_rating(tupl,dict_):\n",
    "    if arrR[tupl[0],tupl[1]] == 0:\n",
    "        sum_ = 0\n",
    "        for x in ls:\n",
    "            sum_ = sum_ + (x[1] * arrR[x[0],tupl[1]])\n",
    "        sum1 = sum(n for _, n in ls)\n",
    "        return np.divide(sum_, sum1, out=np.zeros_like(sum_), where=sum1!=0)\n",
    "    else:\n",
    "        return -1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "def divide_by_root(array):\n",
    "    L = []\n",
    "    for x in array:\n",
    "        L.append(math.sqrt(sum((x**2))))\n",
    "    return np.array(L)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [],
   "source": [
    "def top_k_sorted_dict(dict_, k):\n",
    "    s_dict = list(sorted(dict_.items(), key=lambda item: item[1],reverse = True))\n",
    "    return s_dict[0:k]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# this function was sourced from fast.ai and then modified\n",
    "def proc_col(col):\n",
    "    #Encodes a pandas column with continious ids.\n",
    "    uniq = col.unique()\n",
    "    name2idx = {o:i for i,o in enumerate(uniq)}\n",
    "    return name2idx, np.array([name2idx.get(x, -1) for x in col]), len(uniq)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#this function partly found online\n",
    "def encode_data(df):\n",
    "    # Encodes rating data with continous user and movie ids. \n",
    "    df = df.copy()\n",
    "    for col_name in [\"movieId\"]:\n",
    "        _,col,_ = proc_col(df[col_name])\n",
    "        df[col_name] = col\n",
    "        df = df[df[col_name] >= 0]\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-294-54088193b1a7>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mnewdf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mPATH\u001b[0m\u001b[1;33m/\u001b[0m\u001b[1;34m\"test.csv\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36mto_csv\u001b[1;34m(self, path_or_buf, sep, na_rep, float_format, columns, header, index, index_label, mode, encoding, compression, quoting, quotechar, line_terminator, chunksize, date_format, doublequote, escapechar, decimal)\u001b[0m\n\u001b[0;32m   3226\u001b[0m             \u001b[0mdecimal\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mdecimal\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3227\u001b[0m         )\n\u001b[1;32m-> 3228\u001b[1;33m         \u001b[0mformatter\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msave\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3229\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3230\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mpath_or_buf\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\csvs.py\u001b[0m in \u001b[0;36msave\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    200\u001b[0m                 \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwriter\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mUnicodeWriter\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mwriter_kwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    201\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 202\u001b[1;33m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_save\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    203\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    204\u001b[0m         \u001b[1;32mfinally\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\csvs.py\u001b[0m in \u001b[0;36m_save\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    322\u001b[0m                 \u001b[1;32mbreak\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    323\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 324\u001b[1;33m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_save_chunk\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mstart_i\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mend_i\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    325\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    326\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_save_chunk\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mstart_i\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mend_i\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\io\\formats\\csvs.py\u001b[0m in \u001b[0;36m_save_chunk\u001b[1;34m(self, start_i, end_i)\u001b[0m\n\u001b[0;32m    354\u001b[0m         )\n\u001b[0;32m    355\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 356\u001b[1;33m         \u001b[0mlibwriters\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwrite_csv_rows\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdata\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mix\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mnlevels\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcols\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwriter\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32mpandas\\_libs\\writers.pyx\u001b[0m in \u001b[0;36mpandas._libs.writers.write_csv_rows\u001b[1;34m()\u001b[0m\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "#ONLY RUN THIS IF BRAVE, \n",
    "newdf.to_csv(PATH/\"test.csv\")\n",
    "print(\"done\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
